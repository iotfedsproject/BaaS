swagger: "2.0"
info:
  description: "This is a basic documentation of the Blockchain as a Service (BaaS), platform that will be integrated in ioTFeds by CERTH/ITI. The baasic endpoints for user and federation magement are described here. The documentation will be adjusted and extended as the platform is integrated."
  version: "1.0.0"
  title: "On-chain information in IoTFeds"
# # host: "petstore.swagger.io"
# # basePath: "/v2"
tags:
# # - name: "pet"
# #   description: "Everything about your Pets"
# #   externalDocs:
# #     description: "Find out more"
# #     url: "http://swagger.io"
# # - name: "store"
# #   description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
- name: "federation"
  description: "Operations about federation"
- name: "voting"
  description: "Operations about voting"
- name: "reputation"
  description: "Operations about reputation"
- name: "product"
  description: "Operations about product"
- name: "transaction"
  description: "Operations about transaction"
  # externalDocs:
  #   description: "Find out more about our store"
  #   url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:

  /registerUserToBc: # registration use case
    post:
      tags:
      - "user"
      summary: "Register user on Blockchain"
      description: "This is the process of signing up."
      operationId: "createUser"
      produces:
      - "message"
      parameters:
      # - in: "body"
      #   name: "body"
      #   description: "Created user object"
      #   required: true
      #   schema:
      #     $ref: "#/definitions/User" # update user definition
      - name: "id"
        in: "query"
        description: "The organization's symbiote id"
        required: true
        type: "string"
      - name: "role"
        in: "query"
        description: "The operating user's role in the organization"
        required: true
        type: "string"
      - name: "mail"
        in: "query"
        description: "The operting user's e-mail adress"
        required: true
        type: "string"
      - name: "organization"
        in: "query"
        description: "The organization's name"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful registration"
        "400":
          description: "registration failed"
          
          
  /getUserInfo: # for every user validation step
    get:
      tags:
      - "user"
      summary: "Information about a user"
      description: "Returns whether a user exists and relative info"
      operationId: "getUserInfo"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "query"
        description: "The user's id"
        required: true
        type: "string"
      responses:
        "200":
          description: "Requested user"
          schema:
            $ref: "#/definitions/User" # update user definition
        "400":
          description: "access denied"
          
  /getAllUsers: # for fed member discovery by admin
    get:
      tags:
      - "user"
      summary: "Information about all users"
      description: "Returns all users registered in the Blockchain"
      operationId: "getAllUsers"
      produces:
      - "application/json"
      responses:
        "200":
          description: "All users object"
          schema:
            type: array
            items:
              type: object
              $ref: "#/definitions/User" # update user definition
        "400":
          description: "access denied"
    
  /updateUserBalance: # serves payments
    patch:
      tags:
      - "user"
      summary: "Updates a user's balance"
      description: "Updates a users balance"
      operationId: "updateBalance"
      produces:
      - "message"
      parameters:
      - name: "user_id"
        in: "query"
        description: "The user's id"
        required: true
        type: "string"
      - name: "transction_fee"
        in: "query"
        description: "The fee to be added/removed from the user's balance"
        required: true
        type: "number"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "update failed"    
          
          
  /registerPlatform: # register platform use case
    patch:
      tags:
      - "user"
      summary: "Associates a platform to related users"
      description: "Assocaites a platform by updating the equivalent fields in the users. Should be invoked when a new platform is created"
      operationId: "registerPlatform"
      produces:
      - "message"
      parameters:
      - name: "platform_id"
        in: "query"
        description: "The platform's id"
        required: true
        type: "string"
      - name: "assoc_user_id"
        in: "query"
        description: "The platform's id"
        required: true
        type: "string"
      # - in: "body"
      
      #   name: "body"
      #   description: "Associated users"
      #   required: true
      #   schema:
      #     "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "update failed"
          
          
  /registerDevice: # register device use case
    patch:
      tags:
      - "user"
      summary: "Registers a device to a user"
      description: "Registers a device by updating the equivalent field in the user model. SHould be invoked when a user registers a new device"
      operationId: "registerDevice"
      produces:
      - "message"
      parameters:
      - name: "device_id"
        in: "query"
        description: "The device's id"
        required: true
        type: "string"
      - name: "platformds"
        in: "query"
        description: "The platforms in which the device is registered"
        required: true
        type: "array"
        items:
          type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "update failed"
          
          
          
  /deleteUser: # only valid under a series of conditions
    delete:
      tags:
      - "user"
      summary: "Deletes a user"
      description: "Deletes a user"
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "query"
        description: "The id of the user to be deleted"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation, user deleted"
          schema:
            $ref: "#/definitions/User" # show deleted federation
        "400":
          description: "bad request"
        "402":
          description: "User must be deleted from all federations first"
        "404":
          description: "User has obligations"
          
          
  /registerFedToBc:
    post:
      tags:
      - "federation"
      summary: "Register federation on Blockchain"
      description: "This is the process of registering a federation to BC."
      operationId: "createFederation"
      produces:
      - "message"
      parameters:
      - name: "fed_id"
        in: "query"
        description: "The federations's id"
        required: true
        type: "string"
      - name: "creator_id"
        in: "query"
        description: "The creator's id"
        required: true
        type: "string"
      - name: "related_applications"
        in: "query"
        description: "The related vertical applications with the fed"
        required: true
        type: "array"
        items:
          type: "string"
      - name: "rules"
        in: "query"
        description: "The federation's rules"
        required: true
        type: "object"
      responses:
        default:
          description: "registration succeeded"
          
        
  /getFedInfo: # for every fed validation step
    get:
      tags:
      - "federation"
      summary: "Validate federation's admin"
      description: "Returns whether a user exists and relative info"
      operationId: "getAdminRights"
      produces:
      - "application/json"
      parameters:
      - name: "fed_id"
        in: "query"
        description: "The federations's id"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Federation" # update federation definition
        "400":
          description: "bad request"
          
  /getAllFeds: # for federation discovery by users
    get:
      tags:
      - "federation"
      summary: "Information about all federations"
      description: "Returns all federations registered in the Blockchain"
      operationId: "getAllFeds"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: array
            items:
              type: object
              $ref: "#/definitions/Federation" # update user definition
        "400":
          description: "bad request"
          
          
  /leaveFed: # register platform use case
    patch:
      tags:
      - "federation"
      summary: "Deletes a member from a federation"
      description: "Deletes a member from a federation if allowed by rules"
      operationId: "leaveFederation"
      produces:
      - "message"
      parameters:
      - name: "user_id"
        in: "query"
        description: "The user's id"
        required: true
        type: "string"
      - name: "fed_id"
        in: "query"
        description: "The federation's id"
        required: true
        type: "string"
      # - in: "body"
      
      #   name: "body"
      #   description: "Associated users"
      #   required: true
      #   schema:
      #     "string"
      responses:
        "200":
          description: "successful operation, member deleted"
          schema:
            $ref: "#/definitions/Federation" # show deleted federation
        "400":
          description: "bad request"  
          
          
  # /getFedRules: # for every rule validation step
  #   get:
  #     tags:
  #     - "federation"
  #     summary: "Get fed rules"
  #     description: "Returns the rules of a federation"
  #     operationId: "getFedRules"
  #     produces:
  #     - "application/json"
  #     parameters:
  #     - name: "admin_id"
  #       in: "query"
  #       description: "The admin's id"
  #       required: true
  #       type: "string"
  #     - name: "fed_id"
  #       in: "query"
  #       description: "The federations's id"
  #       required: true
  #       type: "string"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           type: "object"
  #       "400":
  #         description: "bad request"
          
          
          
  # /updateFedRules: # fed rule update use case
  #   patch:
  #     tags:
  #     - "federation"
  #     summary: "Updates the rules of a federation"
  #     description: "Updates the rules of a federation"
  #     operationId: "changeRules"
  #     produces:
  #     - "application/json"
  #     parameters:
  #     - in: "query"
  #       name: "fed_id"
  #       description: "The id of the federation to change rules to"
  #       required: true
  #       type: "string"
  #     - in: body
  #       name: new_rules
  #       description: The new rules.
  #       required: true
  #       schema:
  #         type: object
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/Federation" # updated federation
  #       "400":
  #         description: "bad request"
            
          
  # /deleteFedMember: # all member deletion use cases
  #   delete:
  #     tags:
  #     - "federation"
  #     summary: "Deletes a member from a federation"
  #     description: "Deletes a member from a federation"
  #     operationId: "deleteMember"
  #     produces:
  #     - "application/json"
  #     parameters:
  #     - name: "user_id"
  #       in: "query"
  #       description: "The id of the member to be deleted"
  #       required: true
  #       type: "string"
  #     - name: "fed_id"
  #       in: "query"
  #       description: "The id of the federation to delete the member from"
  #       required: true
  #       type: "string"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/Federation" # update federation definition
  #       "400":
  #         description: "bad request"  
          
          
  /deleteFederation: # all member deletion use cases
    delete:
      tags:
      - "federation"
      summary: "Deletes a federation"
      description: "Deletes a federation if allowed by rules"
      operationId: "deleteFederation"
      produces:
      - "application/json"
      parameters:
      - name: "fed_id"
        in: "query"
        description: "The id of the federation to be deleted"
        required: true
        type: "string"
      - name: "request_user_id"
        in: "query"
        description: "The id of the person that requests the deletion"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation, federation deleted"
          schema:
            $ref: "#/definitions/Federation" # show deleted federation
        "400":
          description: "bad request"       
 

# /addFedMemberRequest: # all member addition use cases
  #   post:
  #     tags:
  #     - "federation"
  #     summary: "Requests the addition of a member to a federation"
  #     description: "Requests the addition of a member to a federation, a voting procedure is initialized if the proposed member is eligible"
  #     operationId: "addMember"
  #     produces:
  #     - "application/json"
  #     parameters:
  #     - name: "user_id"
  #       in: "query"
  #       description: "The id of the member to be added"
  #       required: true
  #       type: "string"
  #     - name: "fed_id"
  #       in: "query"
  #       description: "The id of the federation to add the member to"
  #       required: true
  #       type: "string"
  #     responses:
  #       "200":
  #         description: "successful request"
  #         schema:
  #           type: object
  #           properties:
  #             voting_id: 
  #               type: string
  #             voter_ids:
  #               type: "array"
  #               items:
  #                 type: "string"
  #       "400":
  #         description: "bad request"
  #       "401":
  #         description: "User not eligible"
          
  # /removeFedMemberRequest: # all member removal use cases
  #   post:
  #     tags:
  #     - "federation"
  #     summary: "Requests the removal of a member to a federation"
  #     description: "Requests the removal of a member to a federation, a voting procedure is initialized if the proposed member is eligible"
  #     operationId: "removeMember"
  #     produces:
  #     - "application/json"
  #     parameters:
  #     - name: "user_id"
  #       in: "query"
  #       description: "The id of the member to be removed"
  #       required: true
  #       type: "string"
  #     - name: "fed_id"
  #       in: "query"
  #       description: "The id of the federation to remove the member from"
  #       required: true
  #       type: "string"
  #     responses:
  #       "200":
  #         description: "successful request"
  #         schema:
  #           type: object
  #           properties:
  #             voting_id: 
  #               type: string
  #             voter_ids:
  #               type: "array"
  #               items:
  #                 type: "string"
  #       "400":
  #         description: "bad request"
  #       "401":
  #         description: "User not in federation"
          
  # /updateFedRulesRequest: # fed rule update use case
  #   post:
  #     tags:
  #     - "federation"
  #     summary: "Requests the update of the rules of a federation"
  #     description: "Requests the update of the rules of a federation, a voting procedure is initialized if the rules are eligible"
  #     operationId: "changeRules"
  #     produces:
  #     - "application/json"
  #     parameters:
  #     - name: "user_id"
  #       in: "query"
  #       description: "The id of the member that proposed changes"
  #       required: true
  #       type: "string"
  #     - in: "query"
  #       name: "fed_id"
  #       description: "The id of the federation to change rules to"
  #       required: true
  #       type: "string"
  #     - in: body
  #       name: new_rules
  #       description: The new rules.
  #       required: true
  #       schema:
  #         type: object
  #     responses:
  #       "200":
  #         description: "successful request"
  #         schema:
  #           type: object
  #           properties:
  #             voting_id: 
  #               type: string
  #             voter_ids:
  #               type: "array"
  #               items:
  #                 type: "string"
  #       "400":
  #         description: "bad request"
  #       "401":
  #         description: "User unauthorized to propose changes"
          



  # /registerVote: # every voting procedure
  #   post:
  #     tags:
  #     - "voting"
  #     summary: "Registers a user's vote"
  #     description: "Registers a user's vote"
  #     operationId: "registerVote"
  #     produces:
  #     - "application/json"
  #     parameters:
  #     - name: "user_id"
  #       in: "query"
  #       description: "The id of the member that is voting"
  #       required: true
  #       type: "string"
  #     - in: "query"
  #       name: "voting_id"
  #       description: "The id of the voting procedure"
  #       required: true
  #       type: "string"
  #     - in: "query"
  #       name: "vote"
  #       description: "The user's vote" #Should be one of yes/no/abstain
  #       required: true
  #       type: "string"
  #     responses:
  #       "200":
  #         description: "successful vote"
  #         schema:
  #           type: object
  #           properties:
  #             yes: 
  #               type: number # %percentage
  #             no: 
  #               type: number # %percentage
  #             abstain: 
  #               type: number # %percentage
  #             pending: 
  #               type: number # %percentage
  #       "400":
  #         description: "bad request"
  #       "401":
  #         description: "User unauthorized to vote"
          
    
  /updateRating: # for rating use case
    patch:
      tags:
      - "reputation"
      summary: "Update  rating"
      description: "Updates the rating of a provider/product updating the equivalent field in the reputation model"
      operationId: "updateRating"
      produces:
      - "application/json"
      parameters:
      - name: "ratee_id"
        in: "query"
        description: "The ratee's id"
        required: true
        type: "string"
      - name: "new_rating"
        in: "query"
        description: "The ratee's new rating"
        required: true
        type: "number"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Reputation" # update user definition
        "400":
          description: "bad request"      
          
          
  /getRating: # for validation
    get:
      tags:
      - "reputation"
      summary: "Validate reputation"
      description: "Returns the rating of a product/provider"
      operationId: "getRating"
      produces:
      - "application/json"
      parameters:
      - name: "ratee_id"
        in: "query"
        description: "The ratee's id"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Reputation" # update federation definition
        "400":
          description: "bad request"

#   /latestBlock:
#     get:
#       tags:
#       - "blockchain"
#       summary: "Information about the latest block"
#       description: "Returns the index of the latest block"
#       operationId: "latestBlock"
#       produces:
#       - "application/json"
#       # parameters:
#       # - name: "username"
#       #   in: "query"
#       #   description: "The user name for login"
#       #   required: true
#       #   type: "string"
#       # - name: "password"
#       #   in: "query"
#       #   description: "The password for login in clear text"
#       #   required: true
#       #   type: "string"
#       responses:
#         "200":
#           description: "successful operation"
#           # schema:
#           #   type: "string"
#           # headers:
#           #   X-Rate-Limit:
#           #     type: "integer"
#           #     format: "int32"
#           #     description: "calls per hour allowed by the user"
#           #   X-Expires-After:
#           #     type: "string"
#           #     format: "date-time"
#           #     description: "date in UTC when token expires"
#         "400":
#           description: "bad request"
          
#   /Difficulty:
#     get:
#       tags:
#       - "blockchain"
#       summary: "Difficulty level of the blockchain"
#       description: "Returns the difficulty of mining operations in the blockcain, corresponds to number of zeros procceeding every newly generated hash"
#       operationId: "difficulty"
#       produces:
#       - "application/json"
#       # parameters:
#       # - name: "username"
#       #   in: "query"
#       #   description: "The user name for login"
#       #   required: true
#       #   type: "string"
#       # - name: "password"
#       #   in: "query"
#       #   description: "The password for login in clear text"
#       #   required: true
#       #   type: "string"
#       responses:
#         "200":
#           description: "successful operation"
#           # schema:
#           #   type: "string"
#           # headers:
#           #   X-Rate-Limit:
#           #     type: "integer"
#           #     format: "int32"
#           #     description: "calls per hour allowed by the user"
#           #   X-Expires-After:
#           #     type: "string"
#           #     format: "date-time"
#           #     description: "date in UTC when token expires"
#         "400":
#           description: "bad request"
  
# # securityDefinitions:
# #   petstore_auth:
# #     type: "oauth2"
# #     authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
# #     flow: "implicit"
# #     scopes:
# #       write:pets: "modify pets in your account"
# #       read:pets: "read your pets"
# #   api_key:
# #     type: "apiKey"
# #     name: "api_key"
# #     in: "header"
definitions:
  # Order:
  #   type: "object"
  #   properties:
  #     id:
  #       type: "integer"
  #       format: "int64"
  #     petId:
  #       type: "integer"
  #       format: "int64"
  #     quantity:
  #       type: "integer"
  #       format: "int32"
  #     shipDate:
  #       type: "string"
  #       format: "date-time"
  #     status:
  #       type: "string"
  #       description: "Order Status"
  #       enum:
  #       - "placed"
  #       - "approved"
  #       - "delivered"
  #     complete:
  #       type: "boolean"
  #       default: false
  #   xml:
  #     name: "Order"
  # Category:
  #   type: "object"
  #   properties:
  #     id:
  #       type: "integer"
  #       format: "int64"
  #     name:
  #       type: "string"
  #   xml:
  #     name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      role:
        type: "string"
      mail:
        type: "string"
      organization:
        type: "string"
      balance:
        type: "number"
      # associated_resources:
      #   type: "array"
      #   items:
      #     type: "string"
      associated_platforms:
        type: "object"
        additionalProperties:
          type: "array"
          items:
              type: "string"
        example:
          platfrom1: ["resource1", "resource2", "resource3"]
          platfrom2: ["resource1", "resource2", "resource3"]
    xml:
      name: "User"
      
  Federation:
    type: "object"
    properties:
      id:
        type: "string"
      creator_id:
        type: "string"  
      member_ids:
        type: "array"
        items:
          type: "string"
      related_applications:
        type: "array"
        items:
          type: "string"
      rules:
        type: "object"
    xml:
      name: "Federation"
      
  Voting:
    type: "object"
    properties:
      id:
        type: "string"
      fed_id:
        type: "string"
      status: 
        type: boolean # 1 = ongoing , 0 = complete
      votes: # all eligible voters are initialized with pending
        type: "object"
        example:
            user1: "yes"
            user2: "pending"
            user3: "abstain"
            user4: "pending"
            user5: "no"
    xml:
      name: "Voting"
      
   
  Reputation:
    type: "object"
    properties:
      associated_id:
        type: "string"
      rep_score:
        type: "number"
    xml:
      name: "Reputation" 
      
      
  Product:
    type: "object"
    properties:
      product_id:
        type: "string"
      price:
        type: "number"
      resource_ids:
        type: "array"
        items:
          type: "string"
      product_details:
        type: "array"
        items:
          type: "object"
          properties:
            product_type:
              type: "string"
            total_volume_mb:
              type: "number"
    xml:
      name: "Product"
        
      
  Transaction:
    type: "object"
    properties:
      transaction_id:
        type: "string"
      product_id:
        type: "string"
      seller_id:
        type: "string"
      buyer_id:
        type: "string"
      valid_until:
        type: "string"
    xml:
      name: "Transaction"
  # Tag:
  #   type: "object"
  #   properties:
  #     id:
  #       type: "integer"
  #       format: "int64"
  #     name:
  #       type: "string"
  #   xml:
  #     name: "Tag"
  # Pet:
  #   type: "object"
  #   required:
  #   - "name"
  #   - "photoUrls"
  #   properties:
  #     id:
  #       type: "integer"
  #       format: "int64"
  #     category:
  #       $ref: "#/definitions/Category"
  #     name:
  #       type: "string"
  #       example: "doggie"
  #     photoUrls:
  #       type: "array"
  #       xml:
  #         name: "photoUrl"
  #         wrapped: true
  #       items:
  #         type: "string"
  #     tags:
  #       type: "array"
  #       xml:
  #         name: "tag"
  #         wrapped: true
  #       items:
  #         $ref: "#/definitions/Tag"
  #     status:
  #       type: "string"
  #       description: "pet status in the store"
  #       enum:
  #       - "available"
  #       - "pending"
  #       - "sold"
  #   xml:
  #     name: "Pet"
  # ApiResponse:
  #   type: "object"
  #   properties:
  #     code:
  #       type: "integer"
  #       format: "int32"
  #     type:
  #       type: "string"
  #     message:
  #       type: "string"